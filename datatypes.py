from dataclasses import dataclass, field
from pydantic import BaseModel
from sklearn.decomposition import PCA
import pandas as pd


@dataclass
class PCAState:
    """Stores the state of a Principal Component Analysis (PCA) transformation.

    Attributes:
        pca_object: Fitted scikit-learn PCA model instance
        pca_cols: Column names used for PCA transformation
        explained_variance: Variance explained by each principal component
        cumulative_variance: Cumulative variance explained by components
        min_components_95_variance: Number of components needed to explain >=95% variance
    """

    pca_object: PCA | None = None
    pca_cols: list[str] = field(default_factory=list)
    explained_variance: list[float] = field(default_factory=list)
    cumulative_variance: list[float] = field(default_factory=list)
    min_components_95_variance: int = 0


@dataclass
class AppState:
    """Main application state container for data analysis.

    Attributes:
        cleaned_df: Preprocessed dataset
        numeric_cols: Numeric column names from cleaned_df
        x_axis: Currently selected feature for X-axis in visualizations
        y_axis: Currently selected feature for Y-axis in visualizations
        filtered_df: Subset of cleaned_df after applying filters
        pca_state: Current state of PCA dimensionality reduction
        api_keys: Dictionary mapping key names to (provider, key) tuples
        active_api_key_name: Name of the currently active API key
        active_provider: Currently selected provider (OpenRouter, Gemini, OpenAI)
        generated_title: Title generated by the AI helper
        last_processed_filename: Last processed CSV filename to avoid reprocessing
    """

    cleaned_df: pd.DataFrame
    numeric_cols: list[str]
    x_axis: str
    y_axis: str
    filtered_df: pd.DataFrame
    pca_state: PCAState
    api_keys: dict[str, tuple[str, str]] = field(default_factory=dict)
    active_api_key_name: str = ""
    active_provider: str = "OpenRouter"
    generated_title: str = ""
    last_processed_filename: str = ""

# Define Pydantic model for title suggestions
class TitleSuggestion(BaseModel):
    title: str

# Define Pydantic model for a single column comparison pair
class ColumnPair(BaseModel):
    column1: str
    column2: str
    reasoning: str
    visualization_type: str = "scatter"
    priority: int = 1  # 1 = highest priority, 2 = medium, 3 = lowest

# Define Pydantic model for multiple column comparison suggestions
class ColumnComparisonSuggestions(BaseModel):
    recommendations: list[ColumnPair]
    overall_analysis: str
