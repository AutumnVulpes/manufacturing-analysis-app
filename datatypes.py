from dataclasses import dataclass, field
from sklearn.decomposition import PCA
import pandas as pd
from typing import List, TYPE_CHECKING

if TYPE_CHECKING:
    from models import ChatMessage


@dataclass
class PCAState:
    """Stores the state of a Principal Component Analysis (PCA) transformation."""

    # Fitted scikit-learn PCA model instance.
    pca_object: PCA | None = None

    # Column names used for PCA transformation.
    pca_cols: list[str] = field(default_factory=list)

    # Variance explained by each principal component.
    explained_variance: list[float] = field(default_factory=list)

    # Cumulative variance explained by components.
    cumulative_variance: list[float] = field(default_factory=list)

    # Number of components needed to explain >=95% variance.
    min_components_95_variance: int = 0


@dataclass
class AppState:
    """Main application state container for data analysis."""

    # Preprocessed dataset.
    cleaned_df: pd.DataFrame

    # Numeric column names from cleaned_df.
    numeric_cols: list[str]

    # Currently selected feature for X-axis in visualizations.
    x_axis: str

    # Currently selected feature for Y-axis in visualizations.
    y_axis: str

    # Subset of cleaned_df after applying filters.
    filtered_df: pd.DataFrame

    # Current state of PCA dimensionality reduction.
    pca_state: PCAState

    # Currently selected provider (OpenRouter, Gemini, OpenAI).
    active_provider: str = ""

    # Currently active API key.
    active_api_key: str = ""

    # Title generated by the AI helper.
    generated_title: str = ""

    # Last processed CSV filename to avoid reprocessing.
    last_processed_filename: str = ""

    # Chat history of past messages.
    chat_history: List["ChatMessage"] = field(default_factory=list)
